#!/usr/bin/env python3
import sys, os
import re

global storyletdb
global qualities
global silent, sids

maxMenuItems=10

storyletdb={}
qualities=[]
silent=False
sids=[]

def dprint(s, flush=True, lnl=False, tnl=False):
		if not silent:
				if(lnl):
						sys.stdout.write("\n")
				sys.stdout.write(s)
				if(tnl):
						sys.stdout.write("\n")
				if(flush):
						sys.stdout.flush()
def progress():
		dprint(".")

def extractQualities(conds):
		q=[]
		for cond in conds:
				q.append(cond.strip().split()[0])
		return list(set(q))

def storyletIngest(sid):	
		global storyletdb, qualities
		name=sid
		scene=None
		idempotent=True
		preconditions=[]
		postconditions=[]
		content=[]

		sf=open("storylets/"+sid+".rps", "r")
		for line in sf.readlines():
				if line.find("Name: ")==0:
						name=line[6:].strip()
				elif line.find("Scene: ")==0:
						scene=line[7:].strip()
				elif line.find("Idempotent: False")==0:
						idempotent=False
				elif line.find("- ")==0:
						preconditions.append(line[2:].strip())
				elif line.find("+ ")==0:
						postconditions.append(line[2:].strip())
				else:
						content.append(line.strip())
		if(idempotent):
				preconditions+=["idem_"+name+" < 1"]
				postconditions+=["item_"+name+" = 1"]
		qualities+=extractQualities(preconditions+postconditions)
		qualities=list(set(qualities))
		storyletdb[sid]={"name":name, "scene":scene, "preconditions":preconditions, "postconditions":postconditions, "content":content, "idempotent":idempotent}
		return storyletdb[sid]

def escape(s):
		return '"'+s.replace('"', '\\"')+'"'
def wln(f, line="", tabPos=0):
		f.write((tabPos*tab)+line+"\n")

def sid2label(s):
			return storyletdb[s]["name"]
tab="    "
hyperRe=re.compile("\[([^\] ]*)\]")
def storylet2rpy(sid):
		global storyletdb

		storylet=snippetdb[sid]
		scene=storylet["scene"]
		content=storylet["content"]
		postconditions=storylet["postconditions"]
		def writeHeader(f):
				wln(f, "# This renpy script was generated by storylet2rpy")
				wln(f, "# "+tab+"sid: "+sid)
				for item in storylet:
						wln(f, "# "+tab+item+": "+escape(str(snippet[item])))
				wln(f)
		def writeLabel(f):
				wln(f, "label "+sid2label(sid)+":")
				if scene:
						wln(f, "scene "+scene, 1)
				for l in content:
						wln(f, l, 1)
				wln(f, "# Postconditions", 1)
				for l in postconditions:
						wln(f, "$ "+l, 1)
				wln(f, "jump storylet_entry", 1)
				wln(f)

		rf=open("storylet_"+sid+".rpy", "w")
		writeHeader(rf)
		writeLabel(rf)
		rf.close()

def writeQualityDB():
		global qualities
		f=open("qualitydb.rpy", "w")
		wln(f, "# Storylet Quality Database")
		wln(f, "# Generated by storylet2rpy")
		wln(f)
		for q in qualities:
				wln(f, "define "+quality+" = 0")
		f.close()

def writeIndex():
		global storyletdb
		f=open("storyletindex.rpy", "w")
		wln(f, "# Storylet Index")
		wln(f, "# Generated by storylet2rpy")
		wln(f)
		wln(f, "label storylet_index:")
		for sid in storyletdb:
				storylet=storyletdb[sid]
				wln(f, "if "+(" and ".join(storylet["preconditions"]))+":", 1)
				wln(f, "jump "+storylet["name"], 2)
		wln(f)
		f.close()

def processStorylets(sids):
		dprint("Processing snippets...")
		for sid in sids:
				storyletIngest(sid)
				progress()
		dprint("\tDONE\nGenerating rpy files...")
		for sid in sids:
				storylet2rpy(sid)
				progress()
		dprint("\tDONE\nGenerating index...")
		writeQualityDB()
		writeIndex(sids)
		dprint("\tDONE", tnl=True)



def main():
		global silent, sids
		sids=[]
		if "-s" in sys.argv:
				silent=True
				sys.argv.remove("-s")
		if len(sys.argv)>1:
				sids=sys.argv[1:]
		else:
				for item in os.listdir("storylets/"):
						if len(item)>4 and item[-4:]==".rps":
								sids.append(item[:-4])
		sids.sort()
		print(sids)
		processSnippets(sids)

main()
