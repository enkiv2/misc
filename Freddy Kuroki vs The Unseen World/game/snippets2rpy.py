#!/usr/bin/env python
import sys
import re

global snippetdb, docByKw, docByTags, tf, wc, silent

snippetdb={}
docByKw={}
docByTags={}
tf={}
wc=0
silent=False

def dprint(s, flush=True, lnl=False, tnl=False):
		if not silent:
				if(lnl):
						sys.stdout.write("\n")
				sys.stdout.write(s)
				if(tnl):
						sys.stdout.write("\n")
				if(flush):
						sys.stdout.flush()
def progress():
		dprint(".")

def snippetIngest(sid):	
		global snippetdb, docByKw, docByTags, tf, wc
		stype="text"
		ssource="notes"
		stitle="[no title]"
		scontent=[]
		stags=[]

		sf=open("snippets/"+sid+".txt", "r")
		for line in sf.readlines():
				if line.find("Type: ")==0:
						stype=line[6:].strip()
				elif line.find("Source: ")==0:
						ssource=line[8:].strip()
				elif line.find("Title: ")==0:
						stitle=line[7:].strip()
				elif line.find("* ")==0:
						stags.append(line[2:].strip())
				else:
						scontent.append(line.strip())
		for tag in stags:
				if tag in docByTags:
						docByTags[tag].append(sid)
				else:
						docByTags=[sid]
		snippetdb[sid]={"type":stype, "source":ssource, "title":stitle, "content":scontent, "tags":stags, "keywords":[]}
		return snippetdb[sid]

def snippetTermFreqs():
		global snippetdb, docByKw, docByTags, tf, wc
		sids=snippetdb.keys()
		sids.sort()
		wordRe=re.compile("([a-z0-9][a-z0-9]*)")
		avg_df=0
		for sid in sids:
				stf={}
				snippet=snippetdb[sid]
				i=0
				for line in snippet["content"]+snippet["tags"]+[snippet["source"], snippet["title"]]:
						words=wordRe.findall(line.lower())
						for word in words:
								if word in tf:
										tf[word]+=1
								else:
										tf[word]=1
								if word in stf:
										stf[word]+=1
								else:
										stf[word]=1
								i+=1
				wc+=i
				snippet["tf"]=stf
				# Calculate average frequency for terms in this document
				df=0
				for w in stf:
						df+=stf[w]
				df=(1.0*df)/i
				avg_df+=df
		avg_df=avg_df/len(snippetdb) # global average frequency within a document

		ax=0
		for word in tf.keys():
				if tf[word]==1:
						del tf[word]
				else:
						ax+=tf[word]
		avg_tf=(1.0*ax)/len(tf) # average frequency between documents
		threshhold=avg_tf/avg_df
		dprint(str(("words", wc, "unique words", len(tf), "snippets", len(snippetdb), "avg_df", avg_df, "avg_tf", avg_tf, "threshhold", threshhold)), lnl=True, tnl=True)
		for sid in sids:
				snippet=snippetdb[sid]
				stfidf=[]
				stf=snippet["tf"]
				for word in stf:
						if word in tf:
								score=(1.0*tf[word])/stf[word]
								if(score>threshhold):
										stfidf.append( (score, word) )
				snippet["tfidf"]={}
				if len(stfidf):
						stfidf.sort()
						kw=[]
						if len(stfidf)>5:
								kw=stfidf[:5]
						else:
								kw=stfidf
						for item in kw:
								(score, word)=item
								snippet["keywords"].append(word)
								snippet["tfidf"][word]=score
								if word in docByKw:
										docByKw[word][sid]=score
								else:
										docByKw[word]={sid:score}
				else:
						snippet["keywords"]=[]
		for kw in docByKw:
				k=docByKw[kw]
				temp=[(k[w], w) for w in k]
				temp.sort()
				docByKw[kw]=[x[1] for x in temp]
		dprint(str(("total keywords:", len(docByKw))), tnl=True)



tab="    "
audiotypes=["video", "audio"]
texttypes=["text", "audio"]
imagetypes=["video", "image"]
menuRedoAction={"video":"watch", "audio":"listen", "text":"read"}
def snippet2rpy(sid):
		global snippetdb, docByKw, docByTags
		def escape(s):
				return '"'+s.replace('"', '\\"')+'"'
		def wln(f, line="", tabPos=0):
				f.write((tabPos*tab)+line+"\n")

		snippet=snippetdb[sid]
		stype=snippet["type"]
		tags=snippet["tags"]
		keywords=snippet["keywords"]
		content=snippet["content"]
		def writeHeader(f):
				wln(f, "# This renpy script was generated by snippets2rpy")
				wln(f, "# "+tab+"sid: "+sid)
				for item in snippet:
						wln(f, "# "+tab+item+": "+escape(str(snippet[item])))
				wln(f)
		def writeTop(f):
				if stype in audiotypes:
						wln(f, "stop sound")
						wln(f, "stop music")
						wln(f)
				wln(f, "define c"+sid+' = Character("'+snippet["title"]+'", kind=nvl)')
				wln(f)
		def writeMenu(f, items, isTags):
				if items:
						lookup=docByKw
						header="TAG"
						if isTags:
								lookup=docByTags
								header="KEYWORD"
						for item in items:
								if item in lookup:
										suffix=":"
										if not (len(lookup[item])>1 and lookup[item][-1]!=sid):
												suffix=" if False:"
										ss=lookup[item]
										s=ss[ss.index(sid)+1]
										title=snippetdb[s]["title"]
										wln(f, escape(header+': '+tag+'-> '+title)+suffix, 2)
										wln(f, "jump l"+s, 3)
		def writeMenus(f):
				wln(f, "nvl_menu:", 1)
				wln(f, escape("Navigate to"), 2)
				wln(f, escape(menuRedoAction.get(stype, "view").capitalize()+" again")+":", 2)
				wln(f, "jump l"+sid, 3)
				writeMenu(f, tags, True)
				writeMenu(f, keywords, False)
				wln(f, escape("Return to index")+":", 2)
				wln(f, "jump index", 3)
		def writeLabel(f):
				wln(rf, "label l"+sid)
				i=0
				if stype=="video":
						wln(f, "nvl "+escape(snippet["title"] + " (video) ("+str(len(snippet["content"]))+" clips)"), 1)
				for l in content:
						if l:
								print(escape(l))
								if stype=="audio":
										wln(f, "stop sound", 1)
										wln(f, "play sound s"+sid+"_"+str(i), 1)
								if stype in texttypes:
										wln(f, tab+"c"+sid+" "+escape(l)+"\n")
								elif stype=="video":
										if(len(snippet["content"])>1):
												i+=1
												wln(f, "nvl "+escape(snippet["title"] + " (clip "+str(i)+"/"+str(len(snippet["content"]))+")"), 1)
										wln(f, "renpy.movie_cutscene("+escape(l)+")", 1)
								i+=1
				if tags:
							wln(f, "c"+sid+" "+escape("Tags: "+(", ".join(tags))), 1)
				if keywords:
							wln(f, "c"+sid+" "+escape("Keywords: "+(", ".join(keywords))), 1)
				writeMenus(f)
				wln(f)


		rf=open("snippet_"+sid+".rpy", "w")
		writeHeader(rf)
		writeTop(rf)
		writeLabel(rf)
		rf.close()

def processSnippets(sids):
		dprint("Processing snippets...")
		for sid in sids:
				snippetIngest(sid)
				progress()
		dprint("\tDONE\nCalculating term frequencies...")
		snippetTermFreqs()
		dprint("\tDONE\nGenerating rpy files...")
		for sid in sids:
				snippet2rpy(sid)
				progress()
		dprint("\tDONE", tnl=True)


def main():
		global silent
		sids=[]
		if "-s" in sys.argv:
				silent=True
				sys.argv.remove("-s")
		if len(sys.argv)>1:
				sids=sys.argv[1:]
		print(sids)
		processSnippets(sids)

main()
